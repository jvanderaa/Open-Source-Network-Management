---
version: '3.7'
services:
  nginx:
    image: nginx:stable
    container_name: production_nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - /etc/ssl/certs/nautobot.crt:/etc/ssl/certs/nautobot.crt
      - /etc/ssl/private/nautobot.key:/etc/ssl/private/nautobot.key
    ports:
      - 80:80
      - 443:443
    restart: "unless-stopped"
    depends_on:
      - nautobot
    networks:
      - main
  nautobot:
    image: "networktocode/nautobot:${NAUTOBOT_IMAGE:-1.1.2}-py${PYTHON_VER:-3.9}"
    env_file:
      - ".env"
    ports:
      - "8443:8443"
      - "8080:8080"
    restart: "unless-stopped"
    volumes:
      - "/opt/netmgmt/jobs/:/opt/nautobot/jobs/"
      - "/opt/netmgmt/nautobot_config.py:/opt/nautobot/nautobot_config.py"
    depends_on:
      - redis
      - postgres
    networks:
      - main
      - nautobot
  nautobot-worker:
    image: "networktocode/nautobot:${NAUTOBOT_IMAGE:-1.1.2}-py${PYTHON_VER:-3.9}"
    env_file:
      - ".env"
    entrypoint: "nautobot-server rqworker"
    depends_on:
      - nautobot
    restart: "unless-stopped"
    healthcheck:
      interval: "15s"
      timeout: "15s"
      start_period: "5s"
      retries: 3
      test: ["CMD", "nautobot-server", "health_check"]
    volumes:
      - "/opt/netmgmt/jobs/:/opt/nautobot/jobs/"
      - "/opt/netmgmt/nautobot_config.py:/opt/nautobot/nautobot_config.py"
    networks:
      - nautobot
  celery_worker:
    image: "networktocode/nautobot:${NAUTOBOT_IMAGE:-1.1.2}-py${PYTHON_VER:-3.9}"
    entrypoint: "sh -c 'nautobot-server celery worker -l $$NAUTOBOT_LOG_LEVEL'"
    healthcheck:
      interval: "15s"
      timeout: "15s"
      start_period: "5s"
      retries: 3
      test: ["CMD", "nautobot-server", "health_check"]
    depends_on:
      - "nautobot"
      - "redis"
    volumes:
      - "/opt/netmgmt/jobs/:/opt/nautobot/jobs/"
      - "/opt/netmgmt/nautobot_config.py:/opt/nautobot/nautobot_config.py"
    env_file:
      - ".env"
    tty: true
    networks:
      - nautobot
  redis:
    image: "redis:alpine"
    env_file:
      - ".env"
    command:
      - sh
      - -c  # this is to evaluate the $REDIS_PASSWORD from the env
      - redis-server --appendonly yes --requirepass $$NAUTOBOT_REDIS_PASSWORD  ## $$ because of docker-compose
    restart: "unless-stopped"
    networks:
      - nautobot
  postgres:
    image: postgres:10
    env_file:
      - ".env"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: "unless-stopped"
    networks:
      - nautobot
  prometheus:
    image: "prom/prometheus:v2.29.1"
    ports:
      - "9000:9090"
    volumes:
      - "./config:/etc/prometheus"
      - "./data/prometheus:/data"
    command: "--web.enable-lifecycle --config.file=/etc/prometheus/prometheus.yml --storage.tsdb.retention.time 365d"
    networks:
      - prometheus
      - main
  alertmanager:
    image: "prom/alertmanager:v0.22.2"
    ports:
      - "9093:9093"
    volumes:
      - "./config:/etc/alertmanager"
      - "./data/alertmanager:/data"
    restart: "unless-stopped"
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/data'
    networks:
      - prometheus
      - main
  grafana:
    image: "grafana/grafana:8.1.2"
    ports:
      - "3000:3000"
    volumes:
      - "grafana-storage:/var/lib/grafana"
      - "./grafana/provisioning/:/etc/grafana/provisioning/"
    depends_on:
      - "prometheus"
    restart: "unless-stopped"
    networks:
      - prometheus
      - main
  nodeexporter:
    image: prom/node-exporter:v1.2.2
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    expose:
      - 9100
    labels:
      org.label-schema.group: "monitoring"
    networks:
      - prometheus
  vault:
    image: vault
    ports:
      - "8200:8200"
    restart: always
    volumes:
      - /opt/netmgmt/data/vault/logs:/vault/logs
      - /opt/netmgmt/data/vault/file:/vault/file
      - /opt/netmgmt/data/vault/config:/vault/config
    cap_add:
      - IPC_LOCK
    entrypoint: vault server -config=/vault/config/vault.json
    networks:
      - main
volumes:
  postgres_data:
  grafana-storage:
networks:
  main:
  nautobot:
  prometheus:
