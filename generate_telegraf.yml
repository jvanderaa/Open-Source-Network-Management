---
- name: "GENERATE TELEGRAF CONFIGURATIONS"
  hosts: all
  connection: local
  gather_facts: no
  tasks:
    # - debug:
    #     msg: "{{ hostvars }}"
    #   run_once: true

    # - meta: end_play

    - name: "10 - SET ARISTA GNMI PORT"
      set_fact:
        gnmi_port: "6030"
      when:
        - "custom_fields['telemetry_method'].lower() == 'gnmi'"
        - "'arista' in manufacturers"

    - name: "20 - SET CISCO GNMI PORT"
      set_fact:
        gnmi_port: "50000"
      when:
        - "custom_fields['telemetry_method'].lower() == 'gnmi'"
        - "'cisco' in manufacturers"

    - name: "100 - GENERATE CONFIGURATIONS BASED ON THE TELEMETRY TYPE"
      template:
        src: "{{ custom_fields['telemetry_method'].lower() }}-telegraf.j2"
        dest: "out/{{ inventory_hostname }}.cfg"

    - name: "200 - Build Container Image"
      docker_image:
        name: "snmp-telegraf-joshv"
        tag: "1.0"
        source: "build"
        build:
          path: "./"
          dockerfile: "./Dockerfile-SNMP"
          pull: yes
        state: "present"
      run_once: yes

    - name: "210 - START TELEGRAF CONTAINERS"
      docker_container:
        name: "telegraf-{{ inventory_hostname }}"
        state: "started"
        image: "{{ 'snmp-telegraf-joshv:1.0' if custom_fields['telemetry_method'].lower() == 'snmp' else 'telegraf:latest' }}"
        volumes:
          - "./out/{{ inventory_hostname }}.cfg:/etc/telegraf/telegraf.conf:ro"
        published_ports:
          - "{{ custom_fields['telegraf_metrics_port'] }}:{{ custom_fields['telegraf_metrics_port'] }}"
        restart_policy: "unless-stopped"
        networks:
          - name: "netmgmt_prometheus"
        env:
          SNMP_STRING: "{{ lookup('hashi_vault', 'secret=secret/data/snmp_v2:snmp_string token=s.RFlwPhximRK68GO64ukKsPhe url=http://netmgmt2020:8200 validate_certs=false') }}"
          TELEMETRY_USERNAME: "{{ lookup('hashi_vault', 'secret=secret/data/arista:username token=s.RFlwPhximRK68GO64ukKsPhe url=http://netmgmt2020:8200 validate_certs=false') }}"
          TELEMETRY_PASSWORD: "{{ lookup('hashi_vault', 'secret=secret/data/arista:password token=s.RFlwPhximRK68GO64ukKsPhe url=http://netmgmt2020:8200 validate_certs=false') }}"

    - name: "300 - GENERATE PROMETHEUS CONFIGURATION FILE"
      ansible.builtin.template:
        src: "prometheus.yml.j2"
        dest: "/opt/netmgmt/config/prometheus.yml"
        mode: 0644
        owner: "root"
      run_once: yes
      become: yes
      become_method: "sudo"

    - name: "305 - GENERATE PROMETHEUS ALERT RULES CONFIGURATION"
      ansible.builtin.template:
        src: "prometheus.rules.yml.j2"
        dest: "/opt/prometheus/config/prometheus.rules.yml"
        mode: 0644
        owner: "root"
      run_once: yes
      become: yes
      become_method: "sudo"

    - name: "310 - ASSERT VARIALBES FOR ALERTMANAGER ARE ALL SET"
      ansible.builtin.assert:
        that: "item != ''"
      loop:
        - "{{ lookup('env', 'ALERTMANAGER_EMAIL_AUTH_IDENTITY') | default(alertmanager_email_auth_identity) }}"
        - "{{ lookup('env', 'ALERTMANAGER_EMAIL_AUTH_PASSWORD') | default(alertmanager_email_auth_password) }}"
        - "{{ lookup('env', 'ALERTMANAGER_EMAIL_AUTH_USERNAME') | default(alertmanager_email_auth_username) }}"
        - "{{ lookup('env', 'ALERTMANAGER_SRC_EMAIL_ADDRESS') | default(alertmanager_src_email_address) }}"
        - "{{ lookup('env', 'ALERTMANAGER_EMAIL_HOST') | default(alertmanager_email_host) }}"
        - "{{ lookup('env', 'ALERTMANAGER_DST_EMAIL_ADDRESS') | default(alertmanager_dst_email_address) }}"

    - name: "310 - GENERATE ALERTMANAGER CONFIGURATION"
      ansible.builtin.template:
        src: "alertmanager.yml.j2"
        dest: "/opt/prometheus/config/alertmanager.yml"
        mode: 0644
        owner: "root"
      run_once: yes
      become: yes
      become_method: "sudo"

    - name: "315 - GENERATE MONITORING DOCKER-COMPOSE FILE"
      ansible.builtin.template:
        src: "prometheus-compose.yml.j2"
        dest: "/opt/prometheus/docker-compose.yml"
        mode: 0644
        owner: "root"
      run_once: yes
      become: yes
      become_method: "sudo"
